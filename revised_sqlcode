-- B: Function

-- Drop the function if it already exists
DROP FUNCTION IF EXISTS get_rental_days_durations(); 

-- Create the function
CREATE FUNCTION get_rental_days_durations()
RETURNS TABLE (rental_number INTEGER, rental_days_duration INTEGER) AS
$$
BEGIN
    RETURN QUERY
    SELECT
        rental.rental_id as rental_number, 
        EXTRACT(DAY FROM (rental.return_date - rental.rental_date))::integer AS rental_days_duration
    FROM rental;
END;
$$
LANGUAGE plpgsql;

-- C: Detailed Table Report

DROP TABLE IF EXISTS detailed_table_report;

CREATE TABLE detailed_table_report
AS
    SELECT
        customer.customer_id AS "Customer ID",
        first_name AS "First Name",
        last_name AS "Last Name",
        rental.rental_id AS "Rental ID",
        rental.rental_date AS "Rental Date",
        rental.return_date AS "Return Date",
        film.title AS "Movie Title",
        CASE
            WHEN duration.rental_days_duration = 0 THEN 1
            ELSE duration.rental_days_duration
        END AS "Rental Duration",
        payment.amount AS "Rental Fee"
    FROM customer
    JOIN rental ON customer.customer_id = rental.customer_id
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    JOIN (SELECT * FROM get_rental_days_durations()) AS duration ON rental.rental_id = duration.rental_number
    JOIN payment ON rental.rental_id = payment.rental_id
    ORDER BY "Customer ID", "Rental Date";

SELECT * from detailed_table_report;
-- C: Summary Table Report

-- Drop the summary table if it exists
DROP TABLE IF EXISTS summary_table_report;

-- Create the summary table
CREATE TABLE summary_table_report
AS
    SELECT
        customer.customer_id AS "Customer ID",
        CONCAT(customer.last_name, ', ', customer.first_name) AS "Customer Name",
        COUNT(rental.rental_id) AS "Total Rentals",
        SUM(payment.amount) AS "Total Revenue"
    FROM customer
    JOIN rental ON customer.customer_id = rental.customer_id
    JOIN payment ON rental.rental_id = payment.rental_id
    GROUP BY customer.customer_id
    ORDER BY COUNT(rental.rental_id) DESC;

-- Add primary key to the summary table
ALTER TABLE summary_table_report
ADD PRIMARY KEY ("Customer ID");

SELECT * FROM summary_table_report;
-- D: Original SQL Query

SELECT * FROM detailed_table_report
WHERE "Movie Title" = 'Closer Bang';

SELECT * FROM summary_table_report
WHERE "Total Revenue" >= 200;

-- E: Provide original SQL code in a text format that creates a trigger…

-- Drop the trigger and function if they already exist
DROP FUNCTION IF EXISTS update_summary_table();
DROP TRIGGER IF EXISTS trg_update_summary ON detailed_table_report;

-- Create the function for the trigger
CREATE OR REPLACE FUNCTION update_summary_table()
RETURNS TRIGGER
AS $$
BEGIN
    -- Insert or update the summary table
    INSERT INTO summary_table_report (
        "Customer ID", 
        "Customer Name", 
        "Total Rentals", 
        "Total Revenue"
    )
    VALUES (
        NEW."Customer ID", 
        CONCAT(NEW."Last Name", ', ', NEW."First Name"), 
        1, 
        NEW."Rental Fee"
    )
    ON CONFLICT ("Customer ID") DO UPDATE
    SET 
        "Total Rentals" = summary_table_report."Total Rentals" + 1,
        "Total Revenue" = summary_table_report."Total Revenue" + EXCLUDED."Total Revenue";
        
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER trg_update_summary
AFTER INSERT ON detailed_table_report
FOR EACH ROW
EXECUTE FUNCTION update_summary_table();

-- Insert Options for D326

-- FIRST INSERT
INSERT INTO detailed_table_report (
    "Customer ID",
    "First Name",
    "Last Name",
    "Rental ID",
    "Rental Date",
    "Return Date",
    "Movie Title",
    "Rental Duration",
    "Rental Fee"
) VALUES (
    14597, 
    'Julian', 
    'Forbes', 
    15015, 
    '2024-08-30', 
    '2024-09-04', 
    'Pet Haunting', 
    4, 
    9.99
);
-- Show proof of INSERTS and Updated Summary Tabple
SELECT COUNT(*) FROM detailed_table_report;

SELECT COUNT(*) FROM summary_table_report;

SELECT * FROM detailed_table_report
WHERE "Last Name" = 'Forbes';

SELECT * FROM summary_table_report
WHERE "Customer Name" LIKE 'Forbes%'


-- SECOND INSERT
INSERT INTO detailed_table_report (
    "Customer ID",
    "First Name",
    "Last Name",
    "Rental ID",
    "Rental Date",
    "Return Date",
    "Movie Title",
    "Rental Duration",
    "Rental Fee"
) VALUES (
    14598, 
    'Michael', 
    'Grier', 
    14339, 
    '2024-08-01 13:04:15', 
    '2024-08-07 13:15:15', 
    'Greedy Roots', 
    6, 
    7.99
);
-- Show proof of INSERTS and Updated Summary Table
SELECT COUNT(*) FROM detailed_table_report;

SELECT COUNT(*) FROM summary_table_report;

SELECT * FROM detailed_table_report
WHERE "Last Name" = 'Grier';

SELECT * FROM summary_table_report
WHERE "Customer Name" LIKE 'Grier%'

SELECT * FROM detailed_table_report
WHERE "Last Name" IN ('Forbes', 'Grier');

SELECT * FROM summary_table_report
WHERE "Customer Name" LIKE 'Forbes%' OR "Customer Name" LIKE 'Grier%';

-- F: Provide an original stored procedure in a text format…

-- Drop the stored procedure if it already exists
DROP PROCEDURE IF EXISTS refresh_data;

-- Create the stored procedure
CREATE OR REPLACE PROCEDURE refresh_data()
LANGUAGE plpgsql AS
$$
BEGIN
    -- Clear the contents of the detailed table
    TRUNCATE TABLE detailed_table_report;

    -- Clear the contents of the summary table
    TRUNCATE TABLE summary_table_report;

    -- Repopulate the detailed table
    INSERT INTO detailed_table_report
    SELECT
        customer.customer_id AS "Customer ID",
        first_name AS "First Name",
        last_name AS "Last Name",
        rental.rental_id AS "Rental ID",
        rental.rental_date AS "Rental Date",
        rental.return_date AS "Return Date",
        film.title AS "Movie Title",
        CASE
            WHEN duration.rental_days_duration = 0 THEN 1
            ELSE duration.rental_days_duration
        END AS "Rental Duration",
        payment.amount AS "Rental Fee"
    FROM customer
    JOIN rental ON customer.customer_id = rental.customer_id
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    JOIN (SELECT * FROM get_rental_days_durations()) AS duration ON rental.rental_id = duration.rental_number
    JOIN payment ON rental.rental_id = payment.rental_id
    ORDER BY "Customer ID", "Rental Date";

    -- Repopulate the summary table
    INSERT INTO summary_table_report
    SELECT
        customer.customer_id AS "Customer ID",
        CONCAT(customer.last_name, ', ', customer.first_name) AS "Customer Name",
        COUNT(rental.rental_id) AS "Total Rentals",
        SUM(payment.amount) AS "Total Revenue"
    FROM customer
    JOIN rental ON customer.customer_id = rental.customer_id
    JOIN payment ON rental.rental_id = payment.rental_id
    GROUP BY customer.customer_id
    ORDER BY COUNT(rental.rental_id) DESC
    ON CONFLICT ("Customer ID") DO UPDATE
    SET 
        "Total Rentals" = EXCLUDED."Total Rentals",
        "Total Revenue" = EXCLUDED."Total Revenue";
END;
$$;

-- Call the Procedure
CALL refresh_data();

-- Test results of Procedure to reset raw data for tables.
SELECT COUNT(*) FROM detailed_table_report;

SELECT COUNT(*) FROM summary_table_report;

SELECT * FROM detailed_table_report
WHERE "Last Name" IN ('Forbes', 'Grier');

SELECT * FROM summary_table_report
WHERE "Customer Name" LIKE 'Forbes%' OR "Customer Name" LIKE 'Grier%';
